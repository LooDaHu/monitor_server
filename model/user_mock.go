// Code generated by MockGen. DO NOT EDIT.
// Source: ./model/user.go

// Package model is a generated GoMock package.
package model

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
)

// MockUserer is a mock of Userer interface.
type MockUserer struct {
	ctrl     *gomock.Controller
	recorder *MockUsererMockRecorder
}

// MockUsererMockRecorder is the mock recorder for MockUserer.
type MockUsererMockRecorder struct {
	mock *MockUserer
}

// NewMockUserer creates a new mock instance.
func NewMockUserer(ctrl *gomock.Controller) *MockUserer {
	mock := &MockUserer{ctrl: ctrl}
	mock.recorder = &MockUsererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserer) EXPECT() *MockUsererMockRecorder {
	return m.recorder
}

// CreateUserInfo mocks base method.
func (m *MockUserer) CreateUserInfo(user *User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserInfo", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserInfo indicates an expected call of CreateUserInfo.
func (mr *MockUsererMockRecorder) CreateUserInfo(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserInfo", reflect.TypeOf((*MockUserer)(nil).CreateUserInfo), user)
}

// DeleteUserInfo mocks base method.
func (m *MockUserer) DeleteUserInfo(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserInfo", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserInfo indicates an expected call of DeleteUserInfo.
func (mr *MockUsererMockRecorder) DeleteUserInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserInfo", reflect.TypeOf((*MockUserer)(nil).DeleteUserInfo), id)
}

// RetrieveUserInfo mocks base method.
func (m *MockUserer) RetrieveUserInfo(filter bson.M) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveUserInfo", filter)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUserInfo indicates an expected call of RetrieveUserInfo.
func (mr *MockUsererMockRecorder) RetrieveUserInfo(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUserInfo", reflect.TypeOf((*MockUserer)(nil).RetrieveUserInfo), filter)
}

// UpdateUserInfo mocks base method.
func (m *MockUserer) UpdateUserInfo(user *User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockUsererMockRecorder) UpdateUserInfo(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockUserer)(nil).UpdateUserInfo), user)
}
