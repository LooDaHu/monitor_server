// Code generated by MockGen. DO NOT EDIT.
// Source: ./model/app_code.go

// Package model is a generated GoMock package.
package model

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
)

// MockCoder is a mock of Coder interface.
type MockCoder struct {
	ctrl     *gomock.Controller
	recorder *MockCoderMockRecorder
}

// MockCoderMockRecorder is the mock recorder for MockCoder.
type MockCoderMockRecorder struct {
	mock *MockCoder
}

// NewMockCoder creates a new mock instance.
func NewMockCoder(ctrl *gomock.Controller) *MockCoder {
	mock := &MockCoder{ctrl: ctrl}
	mock.recorder = &MockCoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoder) EXPECT() *MockCoderMockRecorder {
	return m.recorder
}

// RetrieveAppCode mocks base method.
func (m_2 *MockCoder) RetrieveAppCode(m bson.M) (*AppCode, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RetrieveAppCode", m)
	ret0, _ := ret[0].(*AppCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAppCode indicates an expected call of RetrieveAppCode.
func (mr *MockCoderMockRecorder) RetrieveAppCode(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAppCode", reflect.TypeOf((*MockCoder)(nil).RetrieveAppCode), m)
}
